plugins {
    id 'java'
    id 'maven'
    id 'io.izzel.taboolib' version '1.3'
    id 'org.jetbrains.kotlin.jvm' version '1.5.10'
    id 'maven-publish'
}

group = 'io.github.sunshine-wzy'
version = '1.1.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'


taboolib {
    tabooLibVersion = '5.7.2'
    loaderVersion = '3.0.4'
    classifier = null
    builtin = true
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'ink.ptms.core:v11600:11600:all'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.5.10'
    implementation fileTree(dir: 'libs', includes: ['*.jar'])
	compileOnly fileTree(dir: 'cores', includes: ['*.jar'])
	
	implementation 'com.google.code.gson:gson:2.8.7'
}

processResources {
    filesMatching("plugin.yml") {
        expand(
                name: rootProject.name,
                main: project.group + ".boot.PluginBoot",
                version: project.version,
                libVersion: taboolib.tabooLibVersion,
                loaderVersion: taboolib.loaderVersion
        )
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${rootProject.name}" }
    }
    destinationDir(file('build/core'))
}

//sourcesJar {
//    from sourceSets.main.allSource
//
//    classifier 'sources'
//    destinationDir(file('F:/Kotlin/Workspace/SkyDream/cores'))
//}

//artifacts {
//    archives sourcesJar
//}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: project.findProperty('repository')) {
                authentication(userName: project.findProperty('user'), password: project.findProperty('password'))
            }
            pom.artifactId = rootProject.name
            pom.groupId = project.group
            pom.version = project.version
            pom.packaging = 'jar'
        }
    }
}


//publishing {
//    publications {
//        myPublication(MavenPublication) {
////            如果是war包填写components.web，如果是jar包填写components.java
//            from components.java
//            
////            指定group/artifact/version信息，可以不填。默认使用项目group/name/version作为groupId/artifactId/version
////            groupId需要注意一下,如果下面仓库的配置是oss.sonatype.org(即中央仓库),那么这里的groupId必须为你在sonatype中申请的ISSUE中设置的ID
//            groupId "io.github.sunshine-wzy"
//            artifactId "$project.name"
//            version "$version"
//
////            artifact(sourcesJar) {
////                classifier "sources"
////            }
//        }
//    }
//    
//    repositories {
//        maven {
//            if (!project.version.endsWith('Release')) {
////                快照版本地址
////            这里如果配置的是sonatype(中央仓库的地址),需要注意上方的groupId,应该跟sonatype中的对应的ISSUE中设置的Group Id 一致
//                url "https://oss.sonatype.org/content/repositories/snapshots"
//            } else {
////                正式版本地址
////                这里如果配置的是sonatype(中央仓库的地址),需要注意上方的groupId,应该跟sonatype中的对应的ISSUE中设置的Group Id 一致
//                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//            }
//            
//            credentials {
//                username = ossUser
//                password = ossPassword
//            }
//        }
//    }
//}

//build.dependsOn copyOutputJar